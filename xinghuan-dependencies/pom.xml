<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.schening.boot</groupId>
  <artifactId>xinghuan-dependencies</artifactId>
  <version>${revision}</version>
  <packaging>pom</packaging>

  <name>${project.artifactId}</name>
  <description>基础 bom 文件，管理整个项目的依赖版本</description>
  <url></url>

  <properties>
    <revision>1.0.0-SNAPSHOT</revision>
    <!-- 统一依赖管理 -->
    <spring.boot.version>2.7.8</spring.boot.version>
    <spring.cloud.version>2021.0.4</spring.cloud.version>
    <spring.cloud.alibaba.version>2021.0.4.0</spring.cloud.alibaba.version>
    <!-- Web 相关 -->
    <springdoc.version>1.6.14</springdoc.version>
    <!-- DB 相关 -->
    <druid.version>1.2.15</druid.version>
    <mybatis-plus.version>3.5.3.1</mybatis-plus.version>
    <!-- MQ 相关 -->
    <rocketmq.version>2.1.1</rocketmq.version>
    <!-- 监控相关 -->
    <skywalking.version>8.12.0</skywalking.version>
    <!-- 工具类相关 -->
    <hutool.version>5.8.11</hutool.version>
    <lombok.version>1.18.24</lombok.version>
    <mapstruct.version>1.5.3.Final</mapstruct.version>
    <guava.version>31.1-jre</guava.version>
  </properties>

  <dependencyManagement>
    <dependencies>
      <!-- 统一依赖管理 -->
      <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-dependencies</artifactId>
        <version>${spring.boot.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
      <dependency>
        <groupId>org.springframework.cloud</groupId>
        <artifactId>spring-cloud-dependencies</artifactId>
        <version>2021.0.4</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
      <dependency>
        <groupId>com.alibaba.cloud</groupId>
        <artifactId>spring-cloud-alibaba-dependencies</artifactId>
        <version>${spring.cloud.alibaba.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>

      <!-- 业务组件 -->
      <dependency>
        <groupId>com.schening.boot</groupId>
        <artifactId>xinghuan-spring-boot-starter-banner</artifactId>
        <version>${revision}</version>
      </dependency>
      <dependency>
        <groupId>com.schening.boot</groupId>
        <artifactId>xinghuan-spring-boot-starter-operatelog</artifactId>
        <version>${revision}</version>
      </dependency>

      <!-- Web 相关 -->
      <dependency>
        <groupId>com.schening.boot</groupId>
        <artifactId>xinghuan-spring-boot-starter-web</artifactId>
        <version>${revision}</version>
      </dependency>

      <dependency>
        <groupId>org.springdoc</groupId>
        <artifactId>springdoc-openapi-ui</artifactId>
        <version>${springdoc.version}</version>
      </dependency>

      <!-- DB 相关 -->
      <dependency>
        <groupId>com.schening.boot</groupId>
        <artifactId>xinghuan-spring-boot-starter-mybatis</artifactId>
        <version>${revision}</version>
      </dependency>

      <dependency>
        <groupId>com.alibaba</groupId>
        <artifactId>druid-spring-boot-starter</artifactId>
        <version>${druid.version}</version>
      </dependency>
      <dependency>
        <groupId>com.baomidou</groupId>
        <artifactId>mybatis-plus-boot-starter</artifactId>
        <version>${mybatis-plus.version}</version>
      </dependency>

      <!-- MQ 相关-->
      <dependency>
        <groupId>com.schening.boot</groupId>
        <artifactId>xinghuan-spring-boot-starter-rocketmq</artifactId>
        <version>${revision}</version>
      </dependency>
      <dependency>
        <groupId>org.apache.rocketmq</groupId>
        <artifactId>rocketmq-spring-boot-starter</artifactId>
        <version>${rocketmq.version}</version>
      </dependency>

      <!-- 监控相关 -->
      <dependency>
        <groupId>cn.iocoder.boot</groupId>
        <artifactId>yudao-spring-boot-starter-monitor</artifactId>
        <version>${revision}</version>
      </dependency>

      <dependency>
        <groupId>org.apache.skywalking</groupId>
        <artifactId>apm-toolkit-trace</artifactId>
        <version>${skywalking.version}</version>
      </dependency>

      <!-- 工具类相关 -->
      <dependency>
        <groupId>com.schening.boot</groupId>
        <artifactId>xinghuan-common</artifactId>
        <version>${revision}</version>
      </dependency>

      <dependency>
        <groupId>org.projectlombok</groupId>
        <artifactId>lombok</artifactId>
        <version>${lombok.version}</version>
      </dependency>

      <dependency>
        <groupId>org.mapstruct</groupId>
        <artifactId>mapstruct</artifactId>
        <version>${mapstruct.version}</version>
      </dependency>
      <dependency>
        <groupId>org.mapstruct</groupId>
        <artifactId>mapstruct-jdk8</artifactId> <!-- use mapstruct-jdk8 for Java 8 or higher -->
        <version>${mapstruct.version}</version>
      </dependency>
      <dependency>
        <groupId>org.mapstruct</groupId>
        <artifactId>mapstruct-processor</artifactId>
        <version>${mapstruct.version}</version>
      </dependency>

      <dependency>
        <groupId>cn.hutool</groupId>
        <artifactId>hutool-all</artifactId>
        <version>${hutool.version}</version>
      </dependency>

      <dependency>
        <groupId>com.google.guava</groupId>
        <artifactId>guava</artifactId>
        <version>${guava.version}</version>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <build>
    <plugins>
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
      </plugin>

      <plugin>
        <groupId>com.spotify</groupId>
        <artifactId>docker-maven-plugin</artifactId>
        <version>1.2.2</version>
        <configuration>
          <!--修改imageName节点的内容，改为私有仓库地址和端口，再加上镜像id和 TAG,我们要直接传到私服-->
          <!--配置最后生成的镜像名，docker images里的，我们这边取项目名:版本-->
          <imageName>${project.build.finalName}:${project.version}</imageName>
          <!--也可以通过以下方式定义image的tag信息。
          <imageTags>
              <imageTag>1.0</imageTag>
          </imageTags> -->
          <!--来指明Dockerfile文件的所在目录-->
          <dockerDirectory>${project.basedir}</dockerDirectory>
          <dockerHost>http://192.168.198.154:2375</dockerHost>
          <!--入口点，project.build.finalName就是project标签下的build标签下 的filename标签内容，testDocker-->
          <!--相当于启动容器后，会自动执行java-jar/testDocker.jar-->
          <entryPoint>["java", "-jar", "/${project.build.finalName}.jar"]</entryPoint>
          <!--是否推送到docker私有仓库，旧版本插件要配置maven的settings文件。 小伙伴们可以自行查阅资料研究一下。
          <pushImage>true</pushImage>
          <registryUrl>192.168.198.155:5000/lagouedu</registryUrl> --> <!-- 这里是复制 jar 包到 docker 容器指定目录配置 -->
          <resources>
            <resource>
              <targetPath>/</targetPath>
              <directory>${project.build.directory}</directory>
              <!--把哪个文件上传到docker，相当于Dockerfile里的add app.jar /-->
              <include>${project.build.finalName}.jar</include>
            </resource>
          </resources>
        </configuration>
      </plugin>
    </plugins>
  </build>

</project>
